local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "üèÉ RunStar Simulator üèÉ | üìú DXDScripts üìú",
   LoadingTitle = "RunStar Simulator",
   LoadingSubtitle = "Script created by DXDScripts",
   ConfigurationSaving = {
      Enabled = false,
   },
   Discord = {
      Enabled = true,
      Invite = "us2eVmuTCq",
      RememberJoins = true
   },
   KeySystem = false, 
})

Rayfield:Notify({
   Title = "RunStar Simulator",
   Content = "Created by DXDScripts",
   Duration = 5,
   Image = 13047715178,
   Actions = {
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local MainTab = Window:CreateTab("üè† Home", nil)
local MainSection = MainTab:CreateSection("Auto Farm Speed")
local MainSection = MainTab:CreateSection("WORLD 1")
local optionToNumber1 = {
    ["1 [0 Required]"] = 1,
    ["2 [200 Required]"] = 2,
    ["3 [2,000 Required]"] = 3,
    ["4 [10,000 Required]"] = 4,
	["5 [20,000 Required]"] = 5,
	["6 [50,000 Required]"] = 6
}

local AutoSpeed1Enabled = false
local selectedOption = "1 [0 Required]"

local Dropdown = MainTab:CreateDropdown({
    Name = "Speed Treadmill [WORLD 1]",
    Options = {"1 [0 Required]", "2 [200 Required]", "3 [2,000 Required]", "4 [10,000 Required]","5 [20,000 Required]","6 [50,000 Required]"},
    CurrentOption = selectedOption,
	MultiSelection = false,
    Callback = function(Option)
        selectedOption = Option[1]
    end,
})

local Toggle = MainTab:CreateToggle({
    Name = "Auto Speed [WORLD 1]",
    CurrentValue = AutoSpeed1Enabled,
    Callback = function(Value)
        AutoSpeed1Enabled = Value
        if AutoSpeed1Enabled then
            while AutoSpeed1Enabled do
                local selectedOptionNumber = optionToNumber1[selectedOption]
                if selectedOptionNumber then
                    local args = {
                        [1] = selectedOptionNumber,
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Train"):WaitForChild("AddSpeed"):FireServer(unpack(args))
                    wait(0.001)
                end
            end
        end
    end,
})
local MainSection = MainTab:CreateSection("WORLD 2")
local optionToNumber2 = {
    ["8 [0 Required]"] = 8,
    ["9 [2M Required]"] = 9,
    ["10 [5M Required]"] = 10,
    ["11 [10M Required]"] = 11,
    ["12 [26M Required]"] = 12,
    ["13 [60M Required]"] = 13
}

local AutoSpeed2Enabled = false
local selectedOption = "8 [0 Required]"

local Dropdown = MainTab:CreateDropdown({
    Name = "Speed Treadmill [WORLD 2]",
    Options = {"8 [0 Required]", "9 [2M Required]", "10 [5M Required]", "11 [10M Required]", "12 [26M Required]", "13 [60M Required]"},
    CurrentOption = selectedOption,
    MultiSelection = false,
    Callback = function(Option)
        selectedOption = Option[1]
    end,
})

local Toggle = MainTab:CreateToggle({
    Name = "Auto Speed [WORLD 2]",
    CurrentValue = AutoSpeed2Enabled,
    Callback = function(Value)
        AutoSpeed2Enabled = Value
        if AutoSpeed2Enabled then
            while AutoSpeed2Enabled do
                local selectedOptionNumber = optionToNumber2[selectedOption]
                if selectedOptionNumber then
                    local args = {
                        [1] = selectedOptionNumber,
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Train"):WaitForChild("AddSpeed"):FireServer(unpack(args))
                    wait(0.001)
                end
            end
        end
    end,
})
local MainSection = MainTab:CreateSection("WORLD 3")
local optionToNumber3 = {
	["15 [0 Required]"] = 15,
    ["16 [2M Required]"] = 16,
    ["17 [5M Required]"] = 17,
    ["18 [10M Required]"] = 18,
    ["19 [26M Required]"] = 19,
    ["20 [60M Required]"] = 20
}

local AutoSpeed3Enabled = false
local selectedOption = "15 [0 Required]"

local Dropdown = MainTab:CreateDropdown({
    Name = "Speed Treadmill [WORLD 3]",
    Options = {"15 [0 Required]", "16 [2M Required]", "17 [5M Required]", "18 [10M Required]", "19 [26M Required]", "20 [60M Required]"},
    CurrentOption = selectedOption,
    MultiSelection = false,
    Callback = function(Option)
        selectedOption = Option[1]
    end,
})

local Toggle = MainTab:CreateToggle({
    Name = "Auto Speed [WORLD 3]",
    CurrentValue = AutoSpeed3Enabled,
    Callback = function(Value)
        AutoSpeed3Enabled = Value
        if AutoSpeed3Enabled then
            while AutoSpeed3Enabled do
                local selectedOptionNumber = optionToNumber3[selectedOption]
                if selectedOptionNumber then
                    local args = {
                        [1] = selectedOptionNumber,
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Train"):WaitForChild("AddSpeed"):FireServer(unpack(args))
                    wait(0.001)
                end
            end
        end
    end,
})

local MainSection = MainTab:CreateSection("Auto Farm Wins")
local AutoWinsEnabled = false
local Toggle = MainTab:CreateToggle({
    Name = "Auto Wins [WORLD 1]",
    CurrentValue = AutoWinsEnabled,
    Callback = function(Value)
        AutoWinsEnabled = Value
		if AutoWinsEnabled then
		 while AutoWinsEnabled do

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Race"):WaitForChild("RacePrepare"):InvokeServer()

wait(0.1)

local args = {
    [1] = true,
    [2] = 1,
    [3] = 1
}

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Race"):WaitForChild("RaceReward"):FireServer(unpack(args))
wait(0.1)
			end
		end
    end,
})


local AutoWins2Enabled = false
local Toggle = MainTab:CreateToggle({
    Name = "Auto Wins [WORLD 2]",
    CurrentValue = AutoWins2Enabled,
    Callback = function(Value)
        AutoWins2Enabled = Value
		if AutoWins2Enabled then
		 while AutoWins2Enabled do

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Race"):WaitForChild("RacePrepare"):InvokeServer()

wait(0.1)

local args = {
    [1] = true,
    [2] = 2,
    [3] = 1
}

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Race"):WaitForChild("RaceReward"):FireServer(unpack(args))
wait(0.1)
			end
		end
    end,
})


local AutoWins3Enabled = false
local Toggle = MainTab:CreateToggle({
    Name = "Auto Wins [WORLD 3]",
    CurrentValue = AutoWins3Enabled,
    Callback = function(Value)
        AutoWins3Enabled = Value
		if AutoWins3Enabled then
		 while AutoWins3Enabled do

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Race"):WaitForChild("RacePrepare"):InvokeServer()

wait(0.1)

local args = {
    [1] = true,
    [2] = 3,
    [3] = 1
}

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Race"):WaitForChild("RaceReward"):FireServer(unpack(args))
wait(0.1)
			end
		end
    end,
})


local MainSection = MainTab:CreateSection("Extra's")
local AutoRebirthEnabled = false
local Toggle = MainTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = AutoRebirthEnabled,
    Callback = function(Value)
        AutoRebirthEnabled = Value
		if AutoRebirthEnabled then
		while AutoRebirthEnabled do
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Train"):WaitForChild("RebirthRequest"):InvokeServer()
       wait(1)
	   end
		end
    end,
})

local Button = MainTab:CreateButton({
    Name = "Buy all Trails",
    Callback = function()
        for i = 1001, 1013 do
    local args = {
        [1] = i
    }

    local remote = game:GetService("ReplicatedStorage").Remotes.Trail.Claim

    if remote then
        remote:FireServer(unpack(args))
    else
        warn("Remote not found")
    end

    wait(1)
end
    end,
})

local Button = MainTab:CreateButton({
    Name = "Claim Codes",
    Callback = function()
        local args = {
            [1] = "billy"
        }
        local remote = "ReplicatedStorage.Remotes.Reward.CodeReward"

        if remote then
            remote:FireServer(unpack(args))
        else
            warn("Remote not found")
        end
    end,
})

local TeleportTab = Window:CreateTab("üíª Teleport", nil)

local MainSection = TeleportTab:CreateSection("Worlds")
local Button = TeleportTab:CreateButton({
    Name = "School [WORLD 1]",
    Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Spawn["1"].CFrame
    end,
})


local Button = TeleportTab:CreateButton({
    Name = "West [WORLD 2]",
    Callback = function()
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Spawn["2"].CFrame
    end,
})

local Button = TeleportTab:CreateButton({
    Name = "City [WORLD 3]",
    Callback = function()
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Spawn["3"].CFrame
    end,
})

local MainSection = TeleportTab:CreateSection("Extra Teleports")
local Button = TeleportTab:CreateButton({
    Name = "Golden Machine",
    Callback = function()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Func.Golden.a.CFrame
    end,
})

local PetsTab = Window:CreateTab("ü•ö Pets", nil)
local MainSection = PetsTab:CreateSection("Extra Pet Options")
local Button = PetsTab:CreateButton({
    Name = "Equip Best Pets",
    Callback = function()
         game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Pet"):WaitForChild("EquipBest"):FireServer()
    end,
})

local MainSection = PetsTab:CreateSection("WORLD 1")

local optionToNumber1 = {
    ["Common"] = 1,
    ["Uncommon"] = 2,
    ["Rare"] = 3,
    ["Epic"] = 4,
}

local AutoBuy1Enabled = false
local selectedOption = "Common"

local Dropdown = PetsTab:CreateDropdown({
    Name = "Pets [WORLD 1]",
    Options = {"Common", "Uncommon", "Rare", "Epic"},
    CurrentOption = selectedOption,
    MultiSelection = false,
    Callback = function(Option)
        selectedOption = Option[1]
    end,
})

local Toggle = PetsTab:CreateToggle({
    Name = "Auto Buy Eggs [WORLD 1]",
    CurrentValue = AutoBuy1Enabled,
    Callback = function(Value)
        AutoBuy1Enabled = Value
        if AutoBuy1Enabled then
            while AutoBuy1Enabled do
                local selectedOptionNumber = optionToNumber1[selectedOption]
                if selectedOptionNumber then
                    local args = {
                        [1] = selectedOptionNumber,
                        [2] = "Open1",
                        [3] = {}
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Hatch"):WaitForChild("EggHatch"):InvokeServer(unpack(args))
                    wait(1)
                end
            end
        end
    end,
})

local MainSection = PetsTab:CreateSection("WORLD 2")

local optionToNumber2 = {
    ["Common"] = 5,
    ["Uncommon"] = 6,
    ["Rare"] = 7,
    ["Epic"] = 8,
    ["Legendary"] = 9,
    ["Mythic"] = 10
}

local AutoBuy2Enabled = false
local selectedOption = "Common"

local Dropdown = PetsTab:CreateDropdown({
    Name = "Pets [WORLD 2]",
    Options = {"Common", "Uncommon", "Rare", "Epic", "Legendary", "Mythic"},
    CurrentOption = selectedOption,
    MultiSelection = false,
    Callback = function(Option)
        selectedOption = Option[1]
    end,
})

local Toggle = PetsTab:CreateToggle({
    Name = "Auto Buy Eggs [WORLD 2]",
    CurrentValue = AutoBuy2Enabled,
    Callback = function(Value)
        AutoBuy2Enabled = Value
        if AutoBuy2Enabled then
            while AutoBuy2Enabled do
                local selectedOptionNumber = optionToNumber2[selectedOption]
                if selectedOptionNumber then
                    local args = {
                        [1] = selectedOptionNumber,
                        [2] = "Open1",
                        [3] = {}
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Hatch"):WaitForChild("EggHatch"):InvokeServer(unpack(args))
                    wait(1)
                end
            end
        end
    end,
})

local MainSection = PetsTab:CreateSection("WORLD 3")
local optionToNumber3 = {
    ["Common"] = 11,
    ["Uncommon"] = 12,
    ["Rare"] = 13,
    ["Epic"] = 14,
    ["Legendary"] = 15,
    ["Mythic"] = 16
}

local AutoBuy3Enabled = false
local selectedOption = "Common"

local Dropdown = PetsTab:CreateDropdown({
    Name = "Pets [WORLD 3]",
    Options = {"Common", "Uncommon", "Rare", "Epic", "Legendary", "Mythic"},
    CurrentOption = selectedOption,
    MultiSelection = false,
    Callback = function(Option)
        selectedOption = Option[1]
    end,
})

local Toggle = PetsTab:CreateToggle({
    Name = "Auto Buy Eggs [WORLD 3]",
    CurrentValue = AutoBuy3Enabled,
    Callback = function(Value)
        AutoBuy3Enabled = Value
        if AutoBuy3Enabled then
            while AutoBuy3Enabled do
                local selectedOptionNumber = optionToNumber3[selectedOption]
                if selectedOptionNumber then
                    local args = {
                        [1] = selectedOptionNumber,
                        [2] = "Open1",
                        [3] = {}
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Hatch"):WaitForChild("EggHatch"):InvokeServer(unpack(args))
                    wait(1)
                else
                    print("Selected option not found in the mapping")
                end
            end
        end
    end,
})

local UserTab = Window:CreateTab("üëΩ User", nil)
local MainSection = UserTab:CreateSection("User Settings")

local NoClipActivated = false
local Noclip = nil
local Clip = nil

function noclip()
    Clip = false
    local function Nocl()
        if Clip == false and game.Players.LocalPlayer.Character ~= nil then
            for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
        wait(0.21)
    end
    Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
    if Noclip then
        Noclip:Disconnect()
    end
    Clip = true
end

local Toggle = UserTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = NoClipActivated,
    Callback = function(Value)
        NoClipActivated = Value
        if NoClipActivated then
            noclip()
        else
            clip()
        end
    end,
})


local Button = UserTab:CreateButton({
   Name = "Infinite Jump Toggle",
   Callback = function()
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	_G.infinJumpStarted = true
	game.StarterGui:SetCore("SendNotification", {Title="Youtube Hub"; Text="Infinite Jump Activated!"; Duration=5;})
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
   end,
})

local Slider = UserTab:CreateSlider({
   Name = "WalkSpeed Slider",
   Range = {16, 350},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "sliderws", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = UserTab:CreateSlider({
   Name = "JumpPower Slider",
   Range = {16, 350},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "sliderjp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})


local MainSection = UserTab:CreateSection("User Extra's")
local BtoolsActivate = true
local Button = UserTab:CreateButton({
    Name = "B-Tools",
    Callback = function()
        if BtoolsActivate then
backpack = game:GetService("Players").LocalPlayer.Backpack
hammer = Instance.new("HopperBin")
hammer.Name = "Hammer"
hammer.BinType = 4
hammer.Parent = backpack

cloneTool = Instance.new("HopperBin")
cloneTool.Name = "Clone"
cloneTool.BinType = 3
cloneTool.Parent = backpack

grabTool = Instance.new("HopperBin")
grabTool.Name = "Grab"
grabTool.BinType = 2
grabTool.Parent = backpack
		end
    end,
})

local AntiAFKActivate = true
local Button = UserTab:CreateButton({
    Name = "Anti-Afk",
    Callback = function()
        if AntiAFKActivate then
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
   vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
   wait(1)
   vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
		end
    end,
})

local CreditTab = Window:CreateTab("üìÉ Credit", nil)
local CreditParagraph = CreditTab:CreateParagraph({Title = "Script: DXDScripts", Content = "GUI: Rayfields"})
